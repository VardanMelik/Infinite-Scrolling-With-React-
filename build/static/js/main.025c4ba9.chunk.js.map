{"version":3,"sources":["useBookSearch.js","App.js","serviceWorker.js","index.js"],"names":["useBookSearch","query","pageNumber","useState","loading","setLoading","error","setError","books","setBooks","hasMore","setHasMore","useEffect","cancel","axios","method","url","params","q","page","cancelToken","CancelToken","c","then","res","prevBooks","Set","data","docs","map","b","title","length","console","log","catch","e","isCancel","App","setQuery","setPageNumber","observer","useRef","lastBookElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","type","value","onChange","target","book","index","ref","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qNAyCeA,MAtCf,SAAuBC,EAAOC,GAAa,IAAD,EACRC,oBAAS,GADD,mBAC/BC,EAD+B,KACtBC,EADsB,OAEZF,oBAAS,GAFG,mBAE/BG,EAF+B,KAExBC,EAFwB,OAGZJ,mBAAS,IAHG,mBAG/BK,EAH+B,KAGxBC,EAHwB,OAIRN,oBAAS,GAJD,mBAI/BO,EAJ+B,KAItBC,EAJsB,KAoCtC,OA9BAC,qBAAW,WACPH,EAAS,MACV,CAACR,IAEJW,qBAAW,WAGP,IAAIC,EAmBJ,OArBAR,GAAW,GACXE,GAAS,GAETO,IAAM,CACFC,OAAQ,MACRC,IAAK,sCACLC,OAAQ,CAACC,EAAGjB,EAAOkB,KAAMjB,GACzBkB,YAAa,IAAIN,IAAMO,aAAY,SAAAC,GAAC,OAAIT,EAAQS,OACjDC,MAAK,SAAAC,GAEJf,GAAS,SAAAgB,GACL,OAAO,YAAI,IAAIC,IAAJ,sBAAYD,GAAZ,YAA0BD,EAAIG,KAAKC,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,gBAElEpB,EAAWa,EAAIG,KAAKC,KAAKI,OAAS,GAClC3B,GAAW,GAEX4B,QAAQC,IAAI,aAAeV,EAAIG,KAAKC,KAAKI,WAC1CG,OAAO,SAAAC,GACHtB,IAAMuB,SAASD,IAClB7B,GAAS,MAEN,kBAAMM,OACd,CAACZ,EAAOC,IAGJ,CAAEE,UAASE,QAAOE,QAAOE,YCarB4B,MAhDf,WAAgB,IAAD,EACanC,mBAAS,IADtB,mBACNF,EADM,KACCsC,EADD,OAEuBpC,mBAAS,KAFhC,mBAEMqC,GAFN,aASTxC,EAAcC,EAAOuC,GAJvBhC,EALW,EAKXA,MACAE,EANW,EAMXA,QACAN,EAPW,EAOXA,QACAE,EARW,EAQXA,MAIImC,EAAWC,mBACXC,EAAqBC,uBAAY,SAAAC,GACjCzC,IACAqC,EAASK,SAASL,EAASK,QAAQC,aACvCN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACtCA,EAAQ,GAAGC,gBAAkBxC,IAC/B8B,GAAc,SAAAW,GAAc,OAAIA,EAAiB,KACjDlB,QAAQC,IAAI,0BAGZW,GAAMJ,EAASK,QAAQM,QAAQP,MAClC,CAACzC,EAASM,IAQb,OACE,6BACE,2BAAO2C,KAAK,OAAOC,MAAOrD,EAAOsD,SARrC,SAAsBnB,GACpBG,EAASH,EAAEoB,OAAOF,OAClBd,EAAc,MAOXhC,EAAMqB,KAAI,SAAC4B,EAAMC,GAChB,OAAIlD,EAAMwB,SAAW0B,EAAQ,EACpB,yBAAKC,IAAKhB,EAAoBiB,IAAKH,GAAOA,GAE1C,yBAAKG,IAAKH,GAAOA,MAI5B,6BAAMrD,GAAW,cACjB,6BAAME,GAAS,WCnCDuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdxC,OAAM,SAAA7B,GACL2B,QAAQ3B,MAAMA,EAAMsE,c","file":"static/js/main.025c4ba9.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction useBookSearch(query, pageNumber) {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [books, setBooks] = useState([])\r\n    const [hasMore, setHasMore] = useState(false)\r\n\r\n    useEffect( () => {\r\n        setBooks([])\r\n    }, [query])\r\n\r\n    useEffect( () => {\r\n        setLoading(true)\r\n        setError(false)\r\n        let cancel\r\n        axios({\r\n            method: 'GET',\r\n            url: 'https://openlibrary.org/search.json',\r\n            params: {q: query, page: pageNumber},\r\n            cancelToken: new axios.CancelToken(c => cancel =c)\r\n        }).then(res => {\r\n            \r\n            setBooks(prevBooks => {\r\n                return [...new Set([...prevBooks, ...res.data.docs.map(b => b.title)])]\r\n            })\r\n            setHasMore(res.data.docs.length > 0)\r\n            setLoading(false)\r\n            //console.log(res.data.docs.map(b => b.title))\r\n            console.log(\"Lengthis: \" + res.data.docs.length)\r\n        }).catch( e => {\r\n            if(axios.isCancel(e)) return\r\n            setError(true)\r\n        })\r\n        return () => cancel()\r\n    }, [query, pageNumber])\r\n\r\n\r\n    return { loading, error, books, hasMore}\r\n}\r\nexport default useBookSearch\r\n","import React, { useState, useRef, useCallback } from 'react';\nimport useBookSearch from './useBookSearch'\n\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [pageNumber, setPageNumber] = useState('1')\n\n  const {\n    books, \n    hasMore,\n    loading,\n    error\n  } = useBookSearch(query, setPageNumber)\n  \n\n  const observer = useRef()\n  const lastBookElementRef = useCallback(node => {\n    if (loading) return\n    if (observer.current) observer.current.disconnect()\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1)\n        console.log('Pagination Visable')\n      }\n    })\n    if (node) observer.current.observe(node)\n  }, [loading, hasMore])\n\n  function handleSearch(e) {\n    setQuery(e.target.value)\n    setPageNumber(1)\n  }\n\n \n  return (\n    <div>\n      <input type=\"text\" value={query} onChange={handleSearch}/>\n      {books.map((book, index) => {\n        if( books.length === index + 1 ) {\n          return <div ref={lastBookElementRef} key={book}>{book}</div>\n        } else {\n          return <div key={book}>{book}</div>\n        }\n        \n      })}\n      <div>{loading && 'Loading...'}</div>\n      <div>{error && 'Error'}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}